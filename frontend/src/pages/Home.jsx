import React, { useState, useEffect, useCallback } from 'react';
import { Link } from 'react-router-dom';
import { toast } from 'react-toastify';
import api from '../utils/api';
import PetCard from '../components/PetCard';
import SearchFilters from '../components/SearchFilters';
import Skeleton from 'react-loading-skeleton';
import 'react-loading-skeleton/dist/skeleton.css';
import '../styles/Home.css';

function Home() {
  const [pets, setPets] = useState([]);
  const [categories, setCategories] = useState([]);
  const [loading, setLoading] = useState(true);
  const [filterLoading, setFilterLoading] = useState(false);
  const [filters, setFilters] = useState({});
  const [hasMore, setHasMore] = useState(true);
  const [page, setPage] = useState(1);

  useEffect(() => {
    fetchData();
    fetchCategories();
  }, []);

  const fetchData = async (pageNum = 1, currentFilters = {}) => {
    try {
      const loadingType = pageNum === 1 ? setLoading : setFilterLoading;
      loadingType(true);

      const params = new URLSearchParams({
        page: pageNum,
        page_size: 12,
        ...currentFilters,
      });

      Object.keys(currentFilters).forEach((key) => {
        if (!currentFilters[key]) params.delete(key);
      });

      const response = await api.get(`/pets/?${params}`);
      const newPets = response.data.results || response.data;

      setPets(pageNum === 1 ? newPets : [...pets, ...newPets]);
      setHasMore(newPets.length === 12);
      setPage(pageNum);
    } catch {
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π');
    } finally {
      setLoading(false);
      setFilterLoading(false);
    }
  };

  const fetchCategories = async () => {
    try {
      const response = await api.get('/categories/');
      setCategories(response.data.results || response.data);
    } catch {
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
    }
  };

  const handleFilter = useCallback((newFilters) => {
    setFilters(newFilters);
    fetchData(1, newFilters);
  }, []);

  const loadMore = () => {
    if (!filterLoading && hasMore) fetchData(page + 1, filters);
  };

  return (
    <div className="home-wrapper">
      {/* Hero Banner */}
      <section className="hero-section">
        <div className="hero-content">
          <h1>–ö—É–ø–∏—Ç–µ –∏–ª–∏ –Ω–∞–π–¥–∏—Ç–µ –ø–∏—Ç–æ–º—Ü–∞ –≤–∞—à–µ–π –º–µ—á—Ç—ã üê∂üê±</h1>
          <p>–¢—ã—Å—è—á–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö –ø–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏. –£–¥–æ–±–Ω—ã–π –ø–æ–∏—Å–∫, —á–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ–¥–∞–≤—Ü—ã, –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å–¥–µ–ª–∫–∏.</p>
          <div className="hero-buttons">
            <Link to="/create" className="btn btn-primary">–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</Link>
            <Link to="/pets" className="btn btn-outline">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ</Link>
          </div>
        </div>
      </section>

      {/* Filters */}
      <div className="filters-section">
        <SearchFilters onFilter={handleFilter} loading={filterLoading} />
      </div>

      {/* Categories */}
      <section className="categories-section">
        <h2>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</h2>
        <div className="categories-grid">
          {categories.slice(0, 6).map((cat) => (
            <Link key={cat.id} to={`/pets?category=${cat.id}`} className="category-card">
              <div className="category-icon">{cat.icon || 'üêæ'}</div>
              <div className="category-name">{cat.name}</div>
              <div className="category-count">{cat.pet_count || 0} –æ–±—ä—è–≤–ª–µ–Ω–∏–π</div>
            </Link>
          ))}
        </div>
      </section>

      {/* Ads */}
      <section className="ads-section">
        <div className="ads-header">
          <h2>–û–±—ä—è–≤–ª–µ–Ω–∏—è —Ä—è–¥–æ–º —Å –≤–∞–º–∏</h2>
          <span className="ads-count">{pets.length} –Ω–∞–π–¥–µ–Ω–æ</span>
        </div>

        <div className="ads-grid">
          {loading ? (
            Array.from({ length: 12 }).map((_, i) => (
              <div key={i} className="pet-card">
                <Skeleton height={200} />
                <Skeleton count={3} />
              </div>
            ))
          ) : pets.length > 0 ? (
            pets.map((pet) => <PetCard key={pet.id} pet={pet} />)
          ) : (
            <div className="no-results">
              <h3>üòø –û–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</h3>
              <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.</p>
            </div>
          )}
        </div>

        {hasMore && !loading && (
          <div className="load-more">
            <button onClick={loadMore} disabled={filterLoading}>
              {filterLoading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë'}
            </button>
          </div>
        )}
      </section>
    </div>
  );
}

export default Home;
